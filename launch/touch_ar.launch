<?xml version="1.0"?>
<launch>

  <!-- Limb Argument -->

  <!-- Limb Argument -->
  <arg name="limb" default="right" />
  <node name="sdk_robot_enable" pkg="intera_interface" type="enable_robot.py" args="-e" />

  <!-- Start the Joint Trajectory Action Server -->
  <node name="sdk_joint_trajectory_action_server" pkg="intera_interface"
  type="joint_trajectory_action_server.py" />






<arg name="config" default="true"/>
<!--   <arg name="rviz_config" default="$(find sawyer_moveit_config)/launch/moveit.rviz" /> -->

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
  <arg name="load_robot_description" default="false"/>
  <!-- Add controller box collision shape to check for link collisions if set to true-->
  <arg name="controller_box" default="true"/>
  <!-- Left and electric gripper arg. Set to true to check for collisions for their links -->
  <arg name="electric_gripper" default="true"/>
  <!-- Set the kinematic tip for the right_arm move_group -->
  <arg name="tip_name"     if="$(arg electric_gripper)" default="right_gripper"/>
  <arg name="tip_name" unless="$(arg electric_gripper)" default="right_hand"/>
  <!-- Add planning context launch file -->
  <include file="$(find sawyer_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    <arg name="electric_gripper" value="$(arg electric_gripper)"/>
    <arg name="tip_name" value="$(arg tip_name)"/>
    <arg name="controller_box" value="$(arg controller_box)"/>
  </include>

  <arg name="kinect" default="false" />
  <arg name="xtion" default="false" />
  <arg name="camera_link_pose" default="0.15 0.075 0.5 0.0 0.7854 0.0"/>
<!--   <include file="$(find sawyer_moveit_config)/launch/move_group.launch">
    <arg name="kinect" value="$(arg kinect)" />
    <arg name="xtion" value="$(arg xtion)" />
    <arg name="camera_link_pose" default="$(arg camera_link_pose)"/>
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include> -->

<!--   <include file="$(find sawyer_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="$(arg config)" />
    <arg name="debug" value="$(arg debug)"/>
    <arg name="rviz_config" value="$(arg rviz_config)" />
  </include> -->

  <!-- If database loading was enabled, start mongodb as well -->
  <!-- <include file="$(find sawyer_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)"/> -->



















  <!-- GDB Debug Option -->
  <!-- <arg name="debug" default="false" /> -->
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find sawyer_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find sawyer_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find sawyer_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="sawyer" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>








  <!-- Sensors Functionality -->
  <!-- <arg name="kinect" default="false" /> -->
  <!-- <arg name="xtion" default="false" /> -->
  <!-- <arg name="camera_link_pose" default="0.15 0.075 0.5 0.0 0.7854 0.0"/> -->
  <include ns="move_group" file="$(find sawyer_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <!-- <arg name="kinect" value="$(arg kinect)" /> -->
    <!-- <arg name="xtion" value="$(arg xtion)" /> -->
    <arg name="camera_link_pose" default="$(arg camera_link_pose)"/>
    <arg name="moveit_sensor_manager" value="sawyer" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="joint_states:=/robot/joint_states  $(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
                                      move_group/MoveGroupExecuteService
                                      move_group/MoveGroupKinematicsService
                                      move_group/MoveGroupMoveAction
                                      move_group/MoveGroupPickPlaceAction
                                      move_group/MoveGroupPlanService
                                      move_group/MoveGroupQueryPlannersService
                                      move_group/MoveGroupStateValidationService
                                      move_group/MoveGroupGetPlanningSceneService
                                      move_group/ClearOctomapService
                                      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>
<node name="planning_node" pkg="planning" type="planning_node.py" />

</launch>
